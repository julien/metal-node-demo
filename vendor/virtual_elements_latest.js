'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * A noop function that can be used when no
 * callback function is passed to patch
 * @const
 */
var noop = function noop() {};

/**
 * The offset in the virtual element declaration where the attributes are
 * specified.
 * @const
 */
var ATTRIBUTES_OFFSET = 3;

/**
 * An array used to store the strings generated by calls to
 * elementOpen, elementOpenStart, elementOpenEnd, elementEnd and elementVoid
 */
var buffer_ = [];

/**
 * A string used to print the current output
 */
var output_ = '';

/**
 * A counter to keep track of the nesting level when generating DOM strings.
 */
var nestingCount_ = 1;

/**
 * Pushes an element in the buffer.
 *
 * @param {string} token The string to push into the buffer.
 * @param {boolean} close A flag indicating if the buffer should be flushed.
 * @return {void} Nothing.
 */
var push_ = function push_(token) {
  var close = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  buffer_.push(token);

  if (close) {
    output_ = buffer_.join('');
    buffer_ = [];
  }
};

/**
 * Returns the constructred DOM string at this point.
 *
 * @param {!Boolean} flush Should the string be flushed.
 * @return {string} The constructed DOM string.
 */
var getOutput = function getOutput() {
  var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
console.log(output_)
  output_ = flush ? '' : output_;
  return output_;
};

/***
 * Defines a virtual attribute at this point of the DOM. This is only valid
 * when called between elementOpenStart and elementOpenEnd.
 *
 * @param {string} name The attribute's name.
 * @param {*} value The attribute's value.
 * @return {void} Nothing.
 */
var attr = function attr(name, value) {
  push_(' ' + name + '="' + value + '"');
};

/**
 * Closes an open virtual Element.
 *
 * @param {string} The Element's tag.
 * @return {void} Nothing.
 */
var elementClose = function elementClose(nameOrCtor) {
  var close = false;
  nestingCount_--;
  if (nestingCount_ === 1) {
    close = true;
  }
  push_('</' + nameOrCtor + '>', close);
};

/**
 * Declares a virtual Element at the current location in the document that has
 * no children.
 *
 * @param {string} The Element's tag or constructor.
 * @param {?string=} key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param {?Array<*>=} statics An array of attribute name/value pairs of the
 *     static attributes for the Element. These will only be set once when the
 *     Element is created.
 * @param {...*} var_args Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return {void} Nothing.
 */
var elementVoid = function elementVoid(nameOrCtor, key, statics, var_args) {
  elementOpen.apply(null, arguments);
  return elementClose(nameOrCtor);
};

/**
 * @param {!string} nameOrCtor The Element's tag or constructor.
 * @param {?string=} key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param {?Array<*>=} statics An array of attribute name/value pairs of the
 *     static attributes for the Element. These will only be set once when the
 *     Element is created.
 * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes
 *     for the Element.
 * @return {void} Nothing.
 */
var elementOpen = function elementOpen(nameOrCtor, key, statics, var_args) {
  elementOpenStart(nameOrCtor, key, statics);

  var i = ATTRIBUTES_OFFSET;
  var j = 0;

  for (; i < arguments.length; i += 2, j += 2) {
    var name = arguments[i];
    var value = arguments[i + 1];
    attr(name, value);
  }

  return elementOpenEnd();
};

/**
 * Closes an open tag started with elementOpenStart.
 *
 * @return {void} Nothing.
 */
var elementOpenEnd = function elementOpenEnd() {
  push_('>');
  nestingCount_++;
};

/**
 * Declares a virtual Element at the current location in the document. This
 * corresponds to an opening tag and a elementClose tag is required. This is
 * like elementOpen, but the attributes are defined using the attr function
 * rather than being passed as arguments. Must be folllowed by 0 or more calls
 * to attr, then a call to elementOpenEnd.
 * @param {string} nameOrCtor The Element's tag or constructor.
 * @param {?string=} key The key used to identify this element. This can be an
 *     empty string, but performance may be better if a unique value is used
 *     when iterating over an array of items.
 * @param {?Array<*>=} statics An array of attribute name/value pairs of the
 *     static attributes for the Element. These will only be set once when the
 *     Element is created.
 * @return {void} Nothing.
 */
var elementOpenStart = function elementOpenStart(nameOrCtor, key, statics) {
  push_('<' + nameOrCtor);
  if (statics) {
    for (var i = 0; i < statics.length; i += 2) {
      var name = /** @type {string} */statics[i];
      var value = statics[i + 1];
      attr(name, value);
    }
  }
};

/**
 * Patches an Element with the the provided function. Exactly one top level
 * element call should be made corresponding to `node`.
 *
 * @param {?object} node The Element where the patch should start.
 * @param {!function(T)} fn A function containing open/close/etc. calls that
 *     describe the DOM. This should have at most one top level element call.
 * @param {T=} data An argument passed to fn to represent DOM state.
 * @return {void} Nothing.
 */
var patch = function patch(node, description, data) {
  var fn = typeof description === 'function' ? description : noop;

  if (typeof node === 'function') {
    node(function () {
      return fn(data);
    });
  } else {
    fn(data);
  }

  var output = getOutput();
  buffer_ = [];
  output_ = '';

  if (Object.prototype.hasOwnProperty.call(node, 'innerHTML')) {
    node.innerHTML = output;
  }
};

var patchOuter = patch;
var patchInner = patch;

/**
 * Declares a virtual Text at this point in the document.
 *
 * @param {string|number|boolean} value The value of the Text.
 * @param {...(function((string|number|boolean)):string)} var_args
 *     Functions to format the value which are called only when the value has
 *     changed.
 *
 * @return {void} Nothing.
 */
var text = function text(value, var_args) {
  var formatted = value;
  if (Array.isArray(var_args)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = var_args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var v = _step.value;

        if (typeof v === 'function') {
          formatted = v(formatted);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  push_('' + formatted);
};

exports.attr = attr;
exports.elementClose = elementClose;
exports.elementOpen = elementOpen;
exports.elementOpenEnd = elementOpenEnd;
exports.elementOpenStart = elementOpenStart;
exports.elementVoid = elementVoid;
exports.getOutput = getOutput;
exports.patch = patch;
exports.patchInner = patchInner;
exports.patchOuter = patchOuter;
exports.text = text;